stages:
  - docker-build
  - docker-push
  - check

.common_rules: &common_rules
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: always

build-and-test:
  image: "docker:stable"
  stage: docker-build
  tags:
    - docker
    - medium
  before_script:
  -   docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - >
      docker build -t $CI_REGISTRY_IMAGE:latest
      --build-arg BUILD_VERSION=$CI_PIPELINE_IID .
    - docker run --rm $CONTAINER_IMAGE:latest -c "yarn danger --version"
    - docker run --rm $CONTAINER_IMAGE:latest -c "jq --version"
    - docker run --rm $CONTAINER_IMAGE:latest -c "uuidgen --version"
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - if: '$CI_PIPELINE_SOURCE == "trigger"'
    when: never

docker-build-push:
  image: "docker:stable"
  stage: docker-push
  tags:
    - docker
    - medium
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - >
      docker build -t $CI_REGISTRY_IMAGE:latest
      --build-arg BUILD_VERSION=$CI_PIPELINE_IID
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME" .
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
  - if: '$CI_PIPELINE_SOURCE == "trigger"'
    when: never
  - if: '$CI_COMMIT_BRANCH == "master"'

danger-mr-review:
  image:
    name: "$CI_REGISTRY_IMAGE:latest"
  stage: check
  tags:
    - generic
    - medium
  cache: {}
  variables:
    DANGER_GITLAB_API_BASE_URL: "${CI_API_V4_URL}"
    DANGER_GITLAB_API_TOKEN: "${DANGER_GITLAB_API_TOKEN}"
  script:
  - code-review
  rules:
  - if: '$CI_PIPELINE_SOURCE == "trigger"'
    when: always
