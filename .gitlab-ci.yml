stages:
  - docker-build
  - docker-test
  # TODO: unit tests
  - docker-push
  - review-mr

variables:
  BETA_VERSION: beta-$CI_COMMIT_SHORT_SHA
  IMAGE: $CI_REGISTRY_IMAGE:latest

.trigger-mr-default: &trigger-mr-default
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.trigger-default: &trigger-default
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  changes:
  - "Dockerfile"
  - "*.js"
  - "src/*"
  - "tests/*"
  - ".gitlab-ci.yml"

.avoid-schedule: &avoid-schedule-rule
  if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PARENT_PIPELINE_SOURCE == "schedule"' # never on schedules
  when: never

.avoid-trigger-rule: &avoid-trigger-rule
  if: '$CI_PIPELINE_SOURCE == "trigger"'
  when: never

.common_rules: &common_rules
  if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  when: always

.template:image-registry-login:
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.template:docker-load:
  script:
    - echo "Docker version > ${BETA_VERSION}"
    - docker load -i image.tar

build:
  tags:
    - docker
  stage: docker-build
  artifacts:
    expire_in: 30 mins
    paths:
      - image.tar
  script:
    - >
      docker build -t $IMAGE
      --build-arg BUILD_VERSION=$CI_PIPELINE_IID
      --build-arg BETA_VERSION=$BETA_VERSION
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME" .
    - docker save $IMAGE -o image.tar
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  #   - *rule-never-on-schedule
  #   - *trigger-mr-default
  #   - *trigger-default
  #   - *rule-never-on-trigger

docker-test:
  image: "docker:stable"
  stage: docker-test
  tags:
    - docker
    - medium
  before_script:
    - !reference [.template:docker-load, script]
  script:
    - docker run --rm $IMAGE -c "echo $BETA_VERSION"
    - docker run --rm $IMAGE -c "yarn danger --version"
    - docker run --rm $IMAGE -c "jq --version"
    - docker run --rm $IMAGE -c "uuidgen --version"
  needs:
    - build
  rules:
  - if: '$CI_PIPELINE_SOURCE == "push"'
  # rules:
  #   - *rule-never-on-schedule
  #   - *trigger-mr-default
  #   - *trigger-default
  #   - *rule-never-on-trigger

push:
  image: "docker:stable"
  stage: docker-push
  tags:
    - docker
    - medium
  before_script:
    - !reference [.template:image-registry-login, script]
    - !reference [.template:docker-load, script]
  script:
    - docker push $CI_REGISTRY_IMAGE:latest
  needs:
    - docker-test
    - build
  rules:
  - if: '$CI_PIPELINE_SOURCE == "push"'
  # rules:
  #   - *rule-never-on-schedule
  #   - *trigger-default
  #   - *rule-never-on-trigger

danger-mr-review:
  image:
    name: "$CI_REGISTRY_IMAGE:latest"
  stage: review-mr
  tags:
    - generic
    - medium
  cache: {}
  variables:
    DANGER_GITLAB_API_BASE_URL: "${CI_API_V4_URL}"
    DANGER_GITLAB_API_TOKEN: "${DANGER_GITLAB_API_TOKEN}"
  script:
  - code-review
  rules:
  - if: '$CI_PIPELINE_SOURCE == "trigger"'
    when: always
  - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    when: never
